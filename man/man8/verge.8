.\" section 8 man page for verge
.\"
.\" This man page was first written by Cody Boone Ferguson for the IOCCC
.\" in 2022.
.\"
.\" Humour impairment is not virtue nor is it a vice, it's just plain
.\" wrong: almost as wrong as JSON spec mis-features and C++ obfuscation! :-)
.\"
.\" "Share and Enjoy!"
.\"     --  Sirius Cybernetics Corporation Complaints Division, JSON spec department. :-)
.\"
.TH verge 8 "18 January 2025" "verge" "jparse tools"
.SH NAME
.B verge
\- determine if first version (major.minor.patch) arg is \(>= or less than the second version (major.minor.patch) arg
.SH SYNOPSIS
.B verge
.RB [\| \-h \|]
.RB [\| \-v
.IR level \|]
.RB [\| \-V \|]
.I major.minor.patch\-1
.I major.minor.patch\-2
.SH DESCRIPTION
.B verge
(short for
"version greater than or equal") compares the two versions specified, determining if they're the first is greater than or equal to the second or if the first is < the second.
.PP
This program requires two arguments but accepts several options.
.SH OPTIONS
.TP
.B \-h
Print help and exit.
.TP
.BI \-v\  level
Set verbosity level to
.I level
(def: 0).
.TP
.B \-V
Print version (of
.BR verge ,
.B jparse
utils,
.B jparse
UTF\-8 library and the
.B jparse
library itself) strings and exit.
.SH EXIT STATUS
.TP
0
first version arg \(>= second version arg
.TQ
1
first version arg < second version arg
.TQ
2
.B \-h
and help string printed or
.B \-V
and version strings (see above) printed
.TQ
3
command line error
.TQ
4
first or second version string is an invalid version
.TQ
\(>= 10
internal error
.SH NOTES
This tool is used in the
.BR run_flex.sh (8)
and
.BR run_bison.sh (8)
scripts to determine if the locally installed flex and bison tools are recent enough to generate the JSON parser from the
.I jparse.l
and
.I jparse.y
files.
.SH BUGS
.PP
If you have an issue with the tool you can report it at
.br
.IR \<https://github.com/xexyl/jparse/issues\> .
.SH EXAMPLES
.PP
Determine if first version,
.IR 1.1.3 ,
is \(>= the second version,
.IR 1.1.4 :
.sp
.RS
.ft B
 verge 1.1.3 1.1.4 && echo \(aqfirst version, 1.1.3, is >= second version, 1.1.4\(aq
.ft R
.RE
.PP
The above will not show any output as the exit status of the command will not be 0.
.PP
Determine if the first version,
.IR 1.1.3 ,
is < the second version,
.IR 1.1.4 :
.sp
.RS
.ft B
 verge 1.1.3 1.1.4 || echo \(aqfirst version, 1.1.3, is < second version, 1.1.4\(aq
.ft R
.RE
.PP
The above will show the string
.B first version, 1.1.3, is < second version, 1.1.4
as the version
.I 1.1.3
is in fact <
.IR 1.1.4 .
