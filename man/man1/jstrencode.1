.\" section 1 man page for jstrencode
.\"
.\" This man page was first written by Cody Boone Ferguson for the IOCCC
.\" in 2022.
.\"
.\" Humour impairment is not virtue nor is it a vice, it's just plain
.\" wrong: almost as wrong as JSON spec mis-features and C++ obfuscation! :-)
.\"
.\" "Share and Enjoy!"
.\"     --  Sirius Cybernetics Corporation Complaints Division, JSON spec department. :-)
.\"
.TH jstrencode 1 "26 October 2024" "jstrencode" "jparse tools"
.SH NAME
.B jstrencode
\- encode JSON encoded strings
.SH SYNOPSIS
.B jstrencode
.RB [\| \-h \|]
.RB [\| \-v
.IR level \|]
.RB [\| \-q \|]
.RB [\| \-V \|]
.RB [\| \-t \|]
.RB [\| \-n \|]
.RB [\| \-N \|]
.RB [\| \-Q \|]
.RB [\| \-e \|]
.RB [\| \-E
.IR level \|]
.RI [\| string
.IR ... \|]
.SH DESCRIPTION
.B jstrencode
Concatenate the string arguments and encode the result as if it were a JSON string.
If given the
.B \-t
option it performs a test on the JSON encode and encode functions.
.PP
By default the program reads from
.BR stdin .
.SH OPTIONS
.TP
.B \-h
Show help and exit.
.TP
.BI \-v\  level
Set verbosity level to
.I level
(def: 0)
.TP
.B \-q
Suppresses some of the output (def: not quiet)
.TP
.B \-V
Show version and exit.
.TP
.B \-t
Run tests on the JSON encode/encode functions
.TP
.B \-n
Do not output a newline after the encode function
.TP
.B \-N
Ignore and skip over all newlines, for easier typing commands.
.TP
.B \-Q
Do not encode double quotes that enclose the concatenation of args (def: do encode)
.TP
.B \-e
Do not encode double quotes that enclose each arg (def: do encode)
.TP
.BI \-E\  level
Entertainment mode at level
.IR level .
.SH EXIT STATUS
.TP
0
encode successful
.TQ
1
encode unsuccessful
.TQ
2
.B \-h
and help string printed or
.B \-V
and version string printed
.TQ
3
command line error
.TQ
>= 10
internal error
.SH BUGS
.PP
A known problem with macOS Terminal is that one has to hit ctrl\-d twice in order for it to properly send
.B EOF
but this occurs in other applications as well so we note this issue here.
.PP
It is worth remembering that, for the
.B \-Q
option, a double quote in the string will still be encoded, if it is a second arg or if another arg is specified, as it will not be a leading or trailing quote.
.PP
If you have an issue with the tool you can report it at
.br
\fI\<https://github.com/xexyl/jparse/issues\>\fP.
.SH EXAMPLES
.PP
Encode the JSON string
.BR {\ "test_mode"\ :\ false\ } :
.sp
.RS
.ft B
 jstrencode { "test_mode" : false }
.ft R
.RE
.sp
Note that we didn't quote it!
.PP
Encode a string containing an escaped double quote from
.B stdin
(send
.BR EOF ,
usually ctrl\-d or
.BR ^D ,
to encode):
.sp
.RS
.ft B
 jstrencode
 {"test\e"ing":false}
 ^D
.ft R
.RE
.PP
Encode just a negative number:
.sp
.RS
.ft B
 jstrencode \-\- \-5
.ft R
.RE
.PP
Run test mode:
.sp
.RS
.ft B
 jstrencode \-t
.ft R
.RE
.PP
Have some fun:
.sp
.RS
.ft B
 jstrencode -E 1
.ft R
.RE
.PP
Have even more fun:
.sp
.RS
.ft B
 jstrencode -E 3
.ft R
.RE
.SH SEE ALSO
.PP
For the decode counterpart, see
.BR jstrdecode (1).
